import java.util.Scanner;

public class Tictac {

    // Method to display the Tic-Tac-Toe grid
    public static void displayGrid(char[][] grid) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(grid[i][j]);
                if (j < 2) {
                    System.out.print(" | ");
                }
            }
            System.out.println();
            if (i < 2) {
                System.out.println("---------");
            }
        }
        System.out.println();
    }

    // Method to check if a player has won
    public static boolean checkWin(char[][] grid, char player) {
        // Check rows and columns
        for (int i = 0; i < 3; i++) {
            if ((grid[i][0] == player && grid[i][1] == player && grid[i][2] == player) ||
                (grid[0][i] == player && grid[1][i] == player && grid[2][i] == player)) {
                return true;
            }
        }
        // Check diagonals
        if ((grid[0][0] == player && grid[1][1] == player && grid[2][2] == player) ||
            (grid[0][2] == player && grid[1][1] == player && grid[2][0] == player)) {
            return true;
        }
        return false;
    }

    // Method to check if the grid is full (tie condition)
    public static boolean isFull(char[][] grid) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        char[][] grid = new char[3][3];

        // Initialize the grid with empty spaces
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                grid[i][j] = ' ';
            }
        }

        char currentPlayer = 'X';
        boolean gameWon = false;

        while (true) {
            displayGrid(grid);
            System.out.println("Player " + currentPlayer + ", which row and column do you choose? (0, 1, or 2)");

            int rowChoice = s.nextInt();
            int columnChoice = s.nextInt();

            // Validate the move
            if (rowChoice < 0 || rowChoice > 2 || columnChoice < 0 || columnChoice > 2 || grid[rowChoice][columnChoice] != ' ') {
                System.out.println("Invalid move. Try again.");
                continue;
            }

            grid[rowChoice][columnChoice] = currentPlayer;

            if (checkWin(grid, currentPlayer)) {
                displayGrid(grid);
                System.out.println("Player " + currentPlayer + " wins!");
                gameWon = true;
                break;
            }

            if (isFull(grid)) {
                displayGrid(grid);
                System.out.println("It's a tie!");
                break;
            }

            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';  // Switch player
        }

        if (!gameWon) {
            System.out.println("Game over! No more moves left.");
        }

        s.close();
    }
}

